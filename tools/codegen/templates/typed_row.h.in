/**
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed in accordance with the terms specified in
 *  the LICENSE file found in the root directory of this source tree.
 */

/*
** This file is generated. Do not modify it manually!
*/

#include <osquery/tables.h>

namespace osquery {
namespace tables {

class {{table_name_ucc}}Row : public TableRow {
public:
  {{table_name_ucc}}Row() {
  }

{% for column in schema %}\
  {{column.type.type}} {{column.name}}_col;
{% endfor %}\

  enum Column {
{% for column in schema %}\
{%   if loop.index0 < 63 %}\
    {{column.name.upper()}} = 1ULL << {{loop.index0}},
{%   else %}\
    {{column.name.upper()}} = 1ULL << 63,
{%   endif %}\
{% endfor %}\
  };

  virtual int get_rowid(sqlite_int64 default_value, sqlite_int64* pRowid) const override {
{% set filtered = schema|select("equalto", "rowid") %}\
{% if filtered|list|length == 1 %}\
    *pRowid = rowid_col;
{% else %}\
    *pRowid = default_value;
{% endif %}\
    return SQLITE_OK;
  }

  virtual int get_column(sqlite3_context* ctx, sqlite3_vtab* vtab, int col) override {
    switch (col) {
{% for column in schema %}\
      case {{loop.index0}}:
{%   if column.type.affinity == "TEXT_TYPE" %}\
        sqlite3_result_text(ctx, {{column.name}}_col.c_str(), static_cast<int>({{column.name}}_col.size()), SQLITE_STATIC);
{%   elif column.type.affinity == "INTEGER_TYPE" %}\
        sqlite3_result_int(ctx, {{column.name}}_col);
{%   elif column.type.affinity == "BIGINT_TYPE" or column.type.affinity == "UNSIGNED_BIGINT_TYPE" %}\
        sqlite3_result_int64(ctx, {{column.name}}_col);
{%   elif column.type.affinity == "DOUBLE_TYPE" %}\
        sqlite3_result_double(ctx, {{column.name}}_col);
{%   endif  %}\
      break;
{% endfor %}\
    }
    return SQLITE_OK;
  }

  virtual Status serialize(JSON& doc, rapidjson::Value& obj) const override {
{% for column in schema %}\
{%   if column.type.affinity == "TEXT_TYPE" %}\
    doc.addRef("{{column.name}}", {{column.name}}_col);
{%   else %}\
    doc.add("{{column.name}}", {{column.name}}_col);
{%   endif  %}\
{% endfor %}\

    return Status();
  }

  virtual operator Row() const override {
    Row result;

{% for column in schema %}\
{%   if column.type.affinity == "TEXT_TYPE" %}\
    result["{{column.name}}"] = {{column.name}}_col;
{%   elif column.type.affinity == "INTEGER_TYPE" %}\
    result["{{column.name}}"] = INTEGER({{column.name}}_col);
{%   elif column.type.affinity == "BIGINT_TYPE" %}\
    result["{{column.name}}"] = BIGINT({{column.name}}_col);
{%   elif column.type.affinity == "UNSIGNED_BIGINT_TYPE" %}\
    result["{{column.name}}"] = UNSIGNED_BIGINT({{column.name}}_col);
{%   elif column.type.affinity == "DOUBLE_TYPE" %}\
    result["{{column.name}}"] = DOUBLE({{column.name}}_col);
{%   endif  %}\
{% endfor %}\

    return result;
  }

  virtual TableRowHolder clone() const override {
    return TableRowHolder(new {{table_name_ucc}}Row(*this));
  }
};
}
}
