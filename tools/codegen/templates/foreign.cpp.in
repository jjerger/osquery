/**
 *  Copyright (c) 2014-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed in accordance with the terms specified in
 *  the LICENSE file found in the root directory of this source tree.
 */

/*
** This file is generated. Do not modify it manually!
*/

#include <osquery/events.h>
#include <osquery/logger.h>
#include <osquery/tables.h>
#include <osquery/registry_factory.h>

namespace osquery {
namespace tables {

auto {{table_name_cc}}Register = []() {
/// BEGIN[GENTABLE]
  class {{table_name_cc}}TablePlugin : public TablePlugin {
   private:
    TableColumns columns() const override {
      return {
{% for column in schema %}\
        std::make_tuple("{{column.name}}", {{column.type.affinity}},\
{% if column.options|length > 0 %} {{column.options_set}}\
{% else %} ColumnOptions::DEFAULT\
{% endif %}\
),
{% endfor %}\
      };
    }
{% if aliases|length > 0 %}\

    std::vector<std::string> aliases() const override {
      return {
{% for alias in aliases %}\
        "{{alias}}",
{% endfor %}\
      };
    }
{% endif %}\

{% if has_column_aliases %}\

  ColumnAliasSet columnAliases() const override {
    return {
{% for column in schema %}\
{% if column.aliases|length > 0 %}\
      {"{{column.name}}", {% raw %}{{% endraw %}\
{% for alias in column.aliases %}"{{alias}}"\
{% if not loop.last %}, {% endif %}\
{% endfor %}}},
{% endif %}\
{% endfor %}\
    };
  }
{% endif %}\

    TableRows generate(QueryContext& request) override { return TableRows(); }
  };

  {
    auto registry = RegistryFactory::get().registry("table");
    registry->add("{{table_name}}",
      std::make_shared<{{table_name_cc}}TablePlugin>(), false);
  }
/// END[GENTABLE]
};

}
}
